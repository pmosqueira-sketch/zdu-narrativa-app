name: CI · DevSecOps KPIs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

env:
  LOG_DIR: private/infra/scripts/logs
  SCHEMAS_DIR: private/quality/data-contracts
  PY_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  kpis:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Ensure dirs
        run: mkdir -p "${LOG_DIR}"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ruff jsonschema
          npm i -g markdownlint-cli

      # --- INSUMOS LIGEROS PARA KPIs ---
      - name: Lint Markdown → markdownlint.json
        run: markdownlint "**/*.md" --ignore "node_modules" --json > "$LOG_DIR/markdownlint.json" || true

      - name: Lint Python → ruff.json
        run: ruff check . --output-format=json > "$LOG_DIR/ruff.json" || true

      - name: Validate JSON (mapped) → schema_validation_report.json
        run: |
          set -e
          cat > /tmp/schema_validate_mapped.py <<'PY'
import os, json, glob
from jsonschema import Draft202012Validator as V

SCHEMAS_DIR=os.environ.get("SCHEMAS_DIR","private/quality/data-contracts")
LOG_DIR=os.environ.get("LOG_DIR","private/infra/scripts/logs")
os.makedirs(LOG_DIR, exist_ok=True)

mapping={
  "security_posture.schema.json":["**/security_posture.json"],
  "protocols.schema.json":["**/protocols.json"],
  "logs.schema.json":["**/logs.json"],
  "kpis.schema.json":["**/kpis.json"],
  "devsecops_kpis.schema.json":["**/devsecops_kpis.json"],
  "crawl.schema.json":["**/crawl_audit.json"],
  "content_audit.schema.json":["**/content_audit.json"],
  "campaigns.schema.json":["**/campaigns_latest.json"]
}

schemas={}
for s in mapping:
  p=os.path.join(SCHEMAS_DIR,s)
  if os.path.isfile(p):
    with open(p,'r',encoding='utf-8') as f:
      schemas[s]=json.load(f)

results={"validated":[], "errors":[]}
for s, pats in mapping.items():
  sch=schemas.get(s)
  if not sch:
    results["errors"].append({"schema":s,"error":"Schema not found"})
    continue
  v=V(sch); found=False
  for pat in pats:
    for dp in glob.glob(pat, recursive=True):
      if dp.endswith(".schema.json"): continue
      found=True
      try:
        with open(dp,'r',encoding='utf-8') as f:
          data=json.load(f)
        issues=[e.message for e in v.iter_errors(data)]
        if issues:
          results["errors"].append({"file":dp,"schema":s,"issues":issues})
        else:
          results["validated"].append({"file":dp,"schema":s})
      except Exception as ex:
        results["errors"].append({"file":dp,"schema":s,"error":str(ex)})
  if not found:
    results["validated"].append({"file":"(not found)","schema":s})

with open(os.path.join(LOG_DIR,"schema_validation_report.json"),"w",encoding="utf-8") as out:
  json.dump(results,out,indent=2,ensure_ascii=False)
print("Schema report written.")
PY
          python /tmp/schema_validate_mapped.py

      - name: List inputs before KPIs
        run: |
          echo "== LOG_DIR content =="
          ls -la "${LOG_DIR}" || true

      # --- KPIs ---
      - name: Build KPIs
        run: |
          python private/quality/pipelines/build_devsecops_kpis.py \
            --logs-root "${LOG_DIR}" \
            --out "${LOG_DIR}/devsecops_kpis.json"

      - name: Check KPIs file exists
        run: |
          if [ ! -f "${LOG_DIR}/devsecops_kpis.json" ]; then
            echo "::error::KPIs output not found at ${LOG_DIR}/devsecops_kpis.json"
            echo "{}" > "${LOG_DIR}/devsecops_kpis.json"
          fi
          echo "KPIs size:"; wc -c "${LOG_DIR}/devsecops_kpis.json" || true
          echo "Head:"; head -c 500 "${LOG_DIR}/devsecops_kpis.json" || true

      - name: Upload KPIs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: devsecops-kpis
          path: ${{ env.LOG_DIR }}/devsecops_kpis.json
          if-no-files-found: warn
