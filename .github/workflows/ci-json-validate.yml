name: CI Â· JSON Validate

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.webp'
      - '**/*.pdf'
      - '**/*.md'
      - 'private/infra/scripts/logs/**'
      - '**/legacy/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.webp'
      - '**/*.pdf'
      - '**/*.md'
      - 'private/infra/scripts/logs/**'
      - '**/legacy/**'
  workflow_dispatch: {}

permissions:
  contents: read

env:
  LOG_DIR: private/infra/scripts/logs
  SCHEMAS_DIR: private/quality/data-contracts
  PY_VERSION: "3.11"

jobs:
  json_validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Ensure dirs
        run: mkdir -p "${LOG_DIR}"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Validate (jsonschema)
        run: |
          set -e
          cat > /tmp/json_validate.py <<'PY'
import os, json, glob, sys
from jsonschema import Draft202012Validator as V

SCHEMAS_DIR=os.environ.get("SCHEMAS_DIR","private/quality/data-contracts")
LOG_DIR=os.environ.get("LOG_DIR","private/infra/scripts/logs")
os.makedirs(LOG_DIR, exist_ok=True)

# Carga todos los *.schema.json
schemas = {}
for s in glob.glob(os.path.join(SCHEMAS_DIR, "*.schema.json")):
    try:
        with open(s,"r",encoding="utf-8") as f:
            schemas[os.path.basename(s)] = json.load(f)
    except Exception as ex:
        print(f"[schema load error] {s}: {ex}", file=sys.stderr)

results = {"validated":[], "errors":[]}
# Valida todos los .json del repo (excepto .schema.json)
for dp in glob.glob("**/*.json", recursive=True):
    if dp.endswith(".schema.json"):
        continue
    for sch_name, sch in schemas.items():
        try:
            with open(dp,"r",encoding="utf-8") as f:
                data=json.load(f)
            v = V(sch)
            issues=[e.message for e in v.iter_errors(data)]
            if issues:
                results["errors"].append({"file":dp,"schema":sch_name,"issues":issues[:50]})
            else:
                results["validated"].append({"file":dp,"schema":sch_name})
        except Exception as ex:
            results["errors"].append({"file":dp,"schema":sch_name,"error":str(ex)})

out_path = os.path.join(LOG_DIR,"json_validate_report.json")
with open(out_path,"w",encoding="utf-8") as out:
    json.dump(results,out,indent=2,ensure_ascii=False)
print(f"json_validate_report.json written to {out_path}")
PY
          python /tmp/json_validate.py

      - name: Summary
        run: |
          echo "## JSON Validate" >> $GITHUB_STEP_SUMMARY
          echo "- LOG_DIR: \`${LOG_DIR}\`" >> $GITHUB_STEP_SUMMARY
          head -c 500 "${LOG_DIR}/json_validate_report.json" >> $GITHUB_STEP_SUMMARY || true

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: json-validate-${{ github.run_number }}
          path: ${{ env.LOG_DIR }}/json_validate_report.json
          if-no-files-found: warn
